<%
  # Setup
  @current_view_types = @view_levels.take_while{|l| l != @view_type } + [@view_type]
  

  def get_fields
    to_return = []
    # fields
    (@model_data["fields"] || {}).each do |fname, fdata|
      permissions = (fdata["permissions"] || {})[@ns_name] || []
      to_return.push(fname) if (@current_view_types & permissions).length > 0
    end
    # shallow relationships
    (@model_data["relationships"] || {}).each do |rname, rdata|
      permissions = (rdata["permissions"] || {})[@ns_name] || []
      if rdata["type"] == "belongs_to" && (@current_view_types & permissions).length > 0
        to_return.push(extract_foreign_key(rname, rdata))
        to_return.push(extract_type_key(rname, rdata)) if rdata[rdata["type"]] && rdata[rdata["type"]]["polymorphic"]
      end
    end
    return(to_return)
  end

  def print_fields(fields, start_length, width_limit = 72)
    toPrint = [","]
    just_begun = true
    fields.each do |field|
      if start_length + toPrint.last.length + 3 + field.length > width_limit && !just_begun
        toPrint.push(" ")
        start_length = 0
      end
      just_begun = false
      toPrint[toPrint.length - 1] += " :#{field},"
    end
    toPrint[toPrint.length - 1].chomp!(",")
    return(toPrint.join("\n"))
  end

  def get_partials(relationships = @model_data["relationships"] || {}, parent = @model_name.underscore)
    to_return = {}
    relationships.each do |rname, rdata|
      permissions = (rdata["permissions"] || {})[@ns_name] || []
      vti = @current_view_types.length - 1
      rview_type = nil
      while vti >= 0 && rview_type.nil?
        rview_type = permissions.detect{|p| p.count('_') == 1 && @current_view_types[vti] == p.split('_')[0]}
        vti = vti - 1
      end
      unless rview_type.nil?
        rview_type = rview_type.split('_')[1]

        if rdata[rdata["type"]] && rdata[rdata["type"]]["polymorphic"] && rdata[rdata["type"]]["possible_models"]
          rname_key = rname
          to_return[rname_key] = {
            plurality: "polysingular",
            type_key: extract_type_key(rname, rdata),
            view_type: rview_type,
            model_name: rdata[rdata["type"]]["possible_models"],
            path: rdata[rdata["type"]]["possible_models"].map{|m| [m,"v1/#{@ns_name.underscore}/#{m.pluralize.underscore}"] }.to_h,
            parent: "#{parent}",
            wherethrough: {},
            relationship_name: rname
          }
        else
          model_name = extract_model_name_from_relationship(rname, rdata)
          rname_key = rname
          rname_key = "#{rname}_attributes" if rdata[rdata["type"]] && rdata[rdata["type"]]["accepts_nested_attributes"]
          to_return[rname_key] = {
            plurality: (rdata["type"] == "has_many" ? "plural" : "singular"),
            view_type: rview_type,
            model_name: model_name,
            path: "v1/#{@ns_name.underscore}/#{model_name.pluralize.underscore}",
            parent: "#{parent}",
            wherethrough: get_partials(rdata["wherethrough"] || {}, "#{parent}.#{rname}".send(*(rdata["type"] == "has_many" ? [:gsub, ".", "_"] : [:itself]))),
            relationship_name: rname,
            sort_block: rdata[rdata["type"]] ? rdata[rdata["type"]]["sort"] : nil
          }
        end
      end
    end
    return(to_return)
  end

  def print_partials(partials, prefix)
    toPrint = []
    partials.each do |pname, pdata|
      toPrint.push("")
      toPrint.push("#{prefix}json.#{pname} do")
      toPrint.push("#{prefix}  unless #{pdata[:parent]}.#{pdata[:relationship_name]}.nil?")
      if pdata[:plurality] == "singular"
        toPrint.push("#{prefix}    json.partial! \"#{pdata[:path]}/#{pdata[:model_name].underscore}_#{pdata[:view_type]}\",")
        toPrint.push("#{prefix}      #{pdata[:model_name].underscore}: #{pdata[:parent]}.#{pdata[:relationship_name]}")
        toPrint.concat(print_partials(pdata[:wherethrough], "#{prefix}    "))
      elsif pdata[:plurality] == "polysingular"
        toPrint.push("#{prefix}    case #{pdata[:parent]}.#{pdata[:type_key]}")
        pdata[:model_name].each do |polymodel|
          toPrint.push("#{prefix}      when \"#{polymodel.camelize}\"")
          toPrint.push("#{prefix}        json.partial! \"#{pdata[:path][polymodel]}/#{polymodel.underscore}_#{pdata[:view_type]}\",")
          toPrint.push("#{prefix}          #{polymodel.underscore}: #{pdata[:parent]}.#{pdata[:relationship_name]}")
          toPrint.concat(print_partials(pdata[:wherethrough], "#{prefix}    ")) # this ain't never gonna do no happenin'
        end
        toPrint.push("#{prefix}    end")
      else
        iterator_name = "#{pdata[:parent]}.#{pdata[:relationship_name]}".gsub(".", "_")
        toPrint.push("#{prefix}    json.array! #{pdata[:parent]}.#{pdata[:relationship_name]}#{pdata[:sort_block] ? ".sort#{pdata[:sort_block]}" : ''} do |#{iterator_name}|")
        toPrint.push("#{prefix}      json.partial! \"#{pdata[:path]}/#{pdata[:model_name].underscore}_#{pdata[:view_type]}\",")
        toPrint.push("#{prefix}        #{pdata[:model_name].underscore}: #{iterator_name}")
        toPrint.concat(print_partials(pdata[:wherethrough], "#{prefix}      "))
        toPrint.push("#{prefix}    end")
      end
      toPrint.push("#{prefix}  end")
      toPrint.push("#{prefix}end")
    end
    return(toPrint)
  end

%>json.extract! <%= @model_name.underscore %><%= print_fields(get_fields, "json.extract! #{@model_name.underscore}".length) %>

<%= print_partials(get_partials, "").join("\n") %>


